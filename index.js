const fs = require('fs');
const csv = require('csv-parser');

// Update with the path to your CSV file
const filePath = './unified_payments.csv';

const countryFlags = {
  AF: 'ðŸ‡¦ðŸ‡«',
  AL: 'ðŸ‡¦ðŸ‡±',
  DZ: 'ðŸ‡©ðŸ‡¿',
  AD: 'ðŸ‡¦ðŸ‡©',
  AO: 'ðŸ‡¦ðŸ‡´',
  AG: 'ðŸ‡¦ðŸ‡¬',
  AR: 'ðŸ‡¦ðŸ‡·',
  AM: 'ðŸ‡¦ðŸ‡²',
  AU: 'ðŸ‡¦ðŸ‡º',
  AT: 'ðŸ‡¦ðŸ‡¹',
  AZ: 'ðŸ‡¦ðŸ‡¿',
  BS: 'ðŸ‡§ðŸ‡¸',
  BH: 'ðŸ‡§ðŸ‡­',
  BD: 'ðŸ‡§ðŸ‡©',
  BB: 'ðŸ‡§ðŸ‡§',
  BY: 'ðŸ‡§ðŸ‡¾',
  BE: 'ðŸ‡§ðŸ‡ª',
  BZ: 'ðŸ‡§ðŸ‡¿',
  BJ: 'ðŸ‡§ðŸ‡¯',
  BT: 'ðŸ‡§ðŸ‡¹',
  BO: 'ðŸ‡§ðŸ‡´',
  BA: 'ðŸ‡§ðŸ‡¦',
  BW: 'ðŸ‡§ðŸ‡¼',
  BR: 'ðŸ‡§ðŸ‡·',
  BN: 'ðŸ‡§ðŸ‡³',
  BG: 'ðŸ‡§ðŸ‡¬',
  BF: 'ðŸ‡§ðŸ‡«',
  BI: 'ðŸ‡§ðŸ‡®',
  CV: 'ðŸ‡¨ðŸ‡»',
  KH: 'ðŸ‡°ðŸ‡­',
  CM: 'ðŸ‡¨ðŸ‡²',
  CA: 'ðŸ‡¨ðŸ‡¦',
  CF: 'ðŸ‡¨ðŸ‡«',
  TD: 'ðŸ‡¹ðŸ‡©',
  CL: 'ðŸ‡¨ðŸ‡±',
  CN: 'ðŸ‡¨ðŸ‡³',
  CO: 'ðŸ‡¨ðŸ‡´',
  KM: 'ðŸ‡°ðŸ‡²',
  CG: 'ðŸ‡¨ðŸ‡¬',
  CD: 'ðŸ‡¨ðŸ‡©',
  CR: 'ðŸ‡¨ðŸ‡·',
  HR: 'ðŸ‡­ðŸ‡·',
  CU: 'ðŸ‡¨ðŸ‡º',
  CY: 'ðŸ‡¨ðŸ‡¾',
  CZ: 'ðŸ‡¨ðŸ‡¿',
  DK: 'ðŸ‡©ðŸ‡°',
  DJ: 'ðŸ‡©ðŸ‡¯',
  DM: 'ðŸ‡©ðŸ‡²',
  DO: 'ðŸ‡©ðŸ‡´',
  EC: 'ðŸ‡ªðŸ‡¨',
  EG: 'ðŸ‡ªðŸ‡¬',
  SV: 'ðŸ‡¸ðŸ‡»',
  GQ: 'ðŸ‡¬ðŸ‡¶',
  ER: 'ðŸ‡ªðŸ‡·',
  EE: 'ðŸ‡ªðŸ‡ª',
  SZ: 'ðŸ‡¸ðŸ‡¿',
  ET: 'ðŸ‡ªðŸ‡¹',
  FJ: 'ðŸ‡«ðŸ‡¯',
  FI: 'ðŸ‡«ðŸ‡®',
  FR: 'ðŸ‡«ðŸ‡·',
  GA: 'ðŸ‡¬ðŸ‡¦',
  GM: 'ðŸ‡¬ðŸ‡²',
  GE: 'ðŸ‡¬ðŸ‡ª',
  DE: 'ðŸ‡©ðŸ‡ª',
  GH: 'ðŸ‡¬ðŸ‡­',
  GR: 'ðŸ‡¬ðŸ‡·',
  GD: 'ðŸ‡¬ðŸ‡©',
  GT: 'ðŸ‡¬ðŸ‡¹',
  GN: 'ðŸ‡¬ðŸ‡³',
  GW: 'ðŸ‡¬ðŸ‡¼',
  GY: 'ðŸ‡¬ðŸ‡¾',
  HT: 'ðŸ‡­ðŸ‡¹',
  HN: 'ðŸ‡­ðŸ‡³',
  HU: 'ðŸ‡­ðŸ‡º',
  IS: 'ðŸ‡®ðŸ‡¸',
  IN: 'ðŸ‡®ðŸ‡³',
  ID: 'ðŸ‡®ðŸ‡©',
  IR: 'ðŸ‡®ðŸ‡·',
  IQ: 'ðŸ‡®ðŸ‡¶',
  IE: 'ðŸ‡®ðŸ‡ª',
  IL: 'ðŸ‡®ðŸ‡±',
  IT: 'ðŸ‡®ðŸ‡¹',
  JM: 'ðŸ‡¯ðŸ‡²',
  JP: 'ðŸ‡¯ðŸ‡µ',
  JO: 'ðŸ‡¯ðŸ‡´',
  KZ: 'ðŸ‡°ðŸ‡¿',
  KE: 'ðŸ‡°ðŸ‡ª',
  KI: 'ðŸ‡°ðŸ‡®',
  KW: 'ðŸ‡°ðŸ‡¼',
  KG: 'ðŸ‡°ðŸ‡¬',
  LA: 'ðŸ‡±ðŸ‡¦',
  LV: 'ðŸ‡±ðŸ‡»',
  LB: 'ðŸ‡±ðŸ‡§',
  LS: 'ðŸ‡±ðŸ‡¸',
  LR: 'ðŸ‡±ðŸ‡·',
  LY: 'ðŸ‡±ðŸ‡¾',
  LI: 'ðŸ‡±ðŸ‡®',
  LT: 'ðŸ‡±ðŸ‡¹',
  LU: 'ðŸ‡±ðŸ‡º',
  MG: 'ðŸ‡²ðŸ‡¬',
  MW: 'ðŸ‡²ðŸ‡¼',
  MY: 'ðŸ‡²ðŸ‡¾',
  MV: 'ðŸ‡²ðŸ‡»',
  ML: 'ðŸ‡²ðŸ‡±',
  MT: 'ðŸ‡²ðŸ‡¹',
  MH: 'ðŸ‡²ðŸ‡­',
  MR: 'ðŸ‡²ðŸ‡·',
  MU: 'ðŸ‡²ðŸ‡º',
  MX: 'ðŸ‡²ðŸ‡½',
  FM: 'ðŸ‡«ðŸ‡²',
  MD: 'ðŸ‡²ðŸ‡©',
  MC: 'ðŸ‡²ðŸ‡¨',
  MN: 'ðŸ‡²ðŸ‡³',
  ME: 'ðŸ‡²ðŸ‡ª',
  MA: 'ðŸ‡²ðŸ‡¦',
  MZ: 'ðŸ‡²ðŸ‡¿',
  MM: 'ðŸ‡²ðŸ‡²',
  NA: 'ðŸ‡³ðŸ‡¦',
  NR: 'ðŸ‡³ðŸ‡·',
  NP: 'ðŸ‡³ðŸ‡µ',
  NL: 'ðŸ‡³ðŸ‡±',
  NZ: 'ðŸ‡³ðŸ‡¿',
  NI: 'ðŸ‡³ðŸ‡®',
  NE: 'ðŸ‡³ðŸ‡ª',
  NG: 'ðŸ‡³ðŸ‡¬',
  KP: 'ðŸ‡°ðŸ‡µ',
  MK: 'ðŸ‡²ðŸ‡°',
  NO: 'ðŸ‡³ðŸ‡´',
  OM: 'ðŸ‡´ðŸ‡²',
  PK: 'ðŸ‡µðŸ‡°',
  PW: 'ðŸ‡µðŸ‡¼',
  PS: 'ðŸ‡µðŸ‡¸',
  PA: 'ðŸ‡µðŸ‡¦',
  PG: 'ðŸ‡µðŸ‡¬',
  PY: 'ðŸ‡µðŸ‡¾',
  PE: 'ðŸ‡µðŸ‡ª',
  PH: 'ðŸ‡µðŸ‡­',
  PL: 'ðŸ‡µðŸ‡±',
  PT: 'ðŸ‡µðŸ‡¹',
  QA: 'ðŸ‡¶ðŸ‡¦',
  RO: 'ðŸ‡·ðŸ‡´',
  RU: 'ðŸ‡·ðŸ‡º',
  RW: 'ðŸ‡·ðŸ‡¼',
  KN: 'ðŸ‡°ðŸ‡³',
  LC: 'ðŸ‡±ðŸ‡¨',
  VC: 'ðŸ‡»ðŸ‡¨',
  WS: 'ðŸ‡¼ðŸ‡¸',
  SM: 'ðŸ‡¸ðŸ‡²',
  ST: 'ðŸ‡¸ðŸ‡¹',
  SA: 'ðŸ‡¸ðŸ‡¦',
  SN: 'ðŸ‡¸ðŸ‡³',
  RS: 'ðŸ‡·ðŸ‡¸',
  SC: 'ðŸ‡¸ðŸ‡¨',
  SL: 'ðŸ‡¸ðŸ‡±',
  SG: 'ðŸ‡¸ðŸ‡¬',
  SK: 'ðŸ‡¸ðŸ‡°',
  SI: 'ðŸ‡¸ðŸ‡®',
  SB: 'ðŸ‡¸ðŸ‡§',
  SO: 'ðŸ‡¸ðŸ‡´',
  ZA: 'ðŸ‡¿ðŸ‡¦',
  KR: 'ðŸ‡°ðŸ‡·',
  SS: 'ðŸ‡¸ðŸ‡¸',
  ES: 'ðŸ‡ªðŸ‡¸',
  LK: 'ðŸ‡±ðŸ‡°',
  SD: 'ðŸ‡¸ðŸ‡©',
  SR: 'ðŸ‡¸ðŸ‡·',
  SE: 'ðŸ‡¸ðŸ‡ª',
  CH: 'ðŸ‡¨ðŸ‡­',
  SY: 'ðŸ‡¸ðŸ‡¾',
  TW: 'ðŸ‡¹ðŸ‡¼',
  TJ: 'ðŸ‡¹ðŸ‡¯',
  TZ: 'ðŸ‡¹ðŸ‡¿',
  TH: 'ðŸ‡¹ðŸ‡­',
  TL: 'ðŸ‡¹ðŸ‡±',
  TG: 'ðŸ‡¹ðŸ‡¬',
  TO: 'ðŸ‡¹ðŸ‡´',
  TT: 'ðŸ‡¹ðŸ‡¹',
  TN: 'ðŸ‡¹ðŸ‡³',
  TR: 'ðŸ‡¹ðŸ‡·',
  TM: 'ðŸ‡¹ðŸ‡²',
  UG: 'ðŸ‡ºðŸ‡¬',
  UA: 'ðŸ‡ºðŸ‡¦',
  AE: 'ðŸ‡¦ðŸ‡ª',
  GB: 'ðŸ‡¬ðŸ‡§',
  US: 'ðŸ‡ºðŸ‡¸',
  UY: 'ðŸ‡ºðŸ‡¾',
  UZ: 'ðŸ‡ºðŸ‡¿',
  VU: 'ðŸ‡»ðŸ‡º',
  VA: 'ðŸ‡»ðŸ‡¦',
  VE: 'ðŸ‡»ðŸ‡ª',
  VN: 'ðŸ‡»ðŸ‡³',
  YE: 'ðŸ‡¾ðŸ‡ª',
  ZM: 'ðŸ‡¿ðŸ‡²',
  ZW: 'ðŸ‡¿ðŸ‡¼',
  PR: 'ðŸ‡µðŸ‡·',
  HK: 'ðŸ‡­ðŸ‡°',
};

const earningsByCountry = {};
const paymentsCountByCountry = {};
const paymentAmounts = [];

const formatCurrency = (amount) => {
  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'THB' }).format(amount).replace('THB', 'THB');
};

fs.createReadStream(filePath)
  .pipe(csv({ separator: ',' }))
  .on('data', (row) => {
    const country = row['Card Address Country'];
    const amount = parseFloat(row['Converted Amount']);

    if (earningsByCountry[country]) {
      earningsByCountry[country] += amount;
      paymentsCountByCountry[country] += 1;
    } else {
      earningsByCountry[country] = amount;
      paymentsCountByCountry[country] = 1;
    }

    paymentAmounts.push(amount);
  })
  .on('end', () => {
    const sortedEarnings = Object.keys(earningsByCountry)
      .map((country) => ({
        country,
        flag: countryFlags[country] || '',
        amount: earningsByCountry[country],
        count: paymentsCountByCountry[country],
        average: earningsByCountry[country] / paymentsCountByCountry[country],
      }))
      .sort((a, b) => b.amount - a.amount);

    sortedEarnings.forEach((entry) => {
      console.log(
        `${entry.flag} ${entry.country}: ${formatCurrency(entry.amount)} (Total Payments: ${
          entry.count
        }, Average Payment: ${formatCurrency(entry.average)})`
      );
    });

    const maxPayment = Math.max(...paymentAmounts);
    const minPayment = Math.min(...paymentAmounts);
    const totalPayments = paymentAmounts.length;
    const totalEarnings = paymentAmounts.reduce((sum, value) => sum + value, 0);
    const averagePayment = totalEarnings / totalPayments;

    console.log(`\nOverall Statistics:`);
    console.log(`Total Payments: ${totalPayments}`);
    console.log(`Total Earnings: ${formatCurrency(totalEarnings)}`);
    console.log(`Average Payment: ${formatCurrency(averagePayment)}`);
    console.log(`Maximum Payment: ${formatCurrency(maxPayment)}`);
    console.log(`Minimum Payment: ${formatCurrency(minPayment)}`);
  });
